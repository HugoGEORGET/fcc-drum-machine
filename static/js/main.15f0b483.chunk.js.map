{"version":3,"sources":["DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","playSound","bind","handleKeyPress","document","addEventListener","this","removeEventListener","e","keyCode","props","getElementById","keyTrigger","play","displaySoundName","innerHTML","id","className","onClick","src","url","React","Component","App","map","drumPad","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA+CeA,E,YA5Cb,aAAe,IAAD,8BACZ,+CACKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAHV,E,iFAOZE,SAASC,iBAAiB,UAAWC,KAAKH,kB,6CAI1CC,SAASG,oBAAoB,UAAWD,KAAKH,kB,qCAGhCK,GACTA,EAAEC,UAAYH,KAAKI,MAAMD,SAC3BH,KAAKL,c,kCAKOG,SAASO,eAAeL,KAAKI,MAAME,YAC3CC,OACNP,KAAKQ,qB,yCAILV,SAASO,eAAe,WAAWI,UAAYT,KAAKI,MAAMM,K,+BAI1D,OACE,yBAAKC,UAAU,WAAWD,GAAIV,KAAKI,MAAMM,GAAIE,QAASZ,KAAKL,WACxDK,KAAKI,MAAME,WACZ,2BACEK,UAAU,OACVD,GAAIV,KAAKI,MAAME,WACfO,IAAKb,KAAKI,MAAMU,W,GAtCJC,IAAMC,WC6EbC,MA3Ef,WA0DE,OACE,0BAAMP,GAAG,gBA1DM,CACf,CACEP,QAAS,GACTG,WAAY,IACZI,GAAI,WACJI,IAAK,4DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,WACJI,IAAK,4DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,WACJI,IAAK,4DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,WACJI,IAAK,8DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,OACJI,IAAK,4DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,UACJI,IAAK,0DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,cACJI,IAAK,8DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,OACJI,IAAK,8DAEP,CACEX,QAAS,GACTG,WAAY,IACZI,GAAI,YACJI,IAAK,2DAMKI,KAAI,SAAAC,GACZ,OACE,kBAAC,EAAD,CACET,GAAIS,EAAQT,GACZP,QAASgB,EAAQhB,QACjBG,WAAYa,EAAQb,WACpBQ,IAAKK,EAAQL,SAInB,6BAASJ,GAAG,cC9DEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASO,eAAe,SD6H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.15f0b483.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass DrumPad extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.playSound = this.playSound.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (e.keyCode === this.props.keyCode) {\r\n      this.playSound();\r\n    }\r\n  }\r\n\r\n  playSound() {\r\n    const sound = document.getElementById(this.props.keyTrigger);\r\n    sound.play();\r\n    this.displaySoundName();\r\n  }\r\n\r\n  displaySoundName() {\r\n    document.getElementById(\"display\").innerHTML = this.props.id;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.id} onClick={this.playSound}>\r\n        {this.props.keyTrigger}\r\n        <audio\r\n          className=\"clip\"\r\n          id={this.props.keyTrigger}\r\n          src={this.props.url}\r\n        ></audio>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport DrumPad from \"./DrumPad\";\n\nfunction App() {\n  const drumPads = [\n    {\n      keyCode: 81,\n      keyTrigger: \"Q\",\n      id: \"Heater-1\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n    },\n    {\n      keyCode: 87,\n      keyTrigger: \"W\",\n      id: \"Heater-2\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n    },\n    {\n      keyCode: 69,\n      keyTrigger: \"E\",\n      id: \"Heater-3\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n    },\n    {\n      keyCode: 65,\n      keyTrigger: \"A\",\n      id: \"Heater-4\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n    },\n    {\n      keyCode: 83,\n      keyTrigger: \"S\",\n      id: \"Clap\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n    },\n    {\n      keyCode: 68,\n      keyTrigger: \"D\",\n      id: \"Open-HH\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n    },\n    {\n      keyCode: 90,\n      keyTrigger: \"Z\",\n      id: \"Kick-n'-Hat\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n    },\n    {\n      keyCode: 88,\n      keyTrigger: \"X\",\n      id: \"Kick\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n    },\n    {\n      keyCode: 67,\n      keyTrigger: \"C\",\n      id: \"Closed-HH\",\n      url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n    }\n  ];\n\n  return (\n    <main id=\"drum-machine\">\n      {drumPads.map(drumPad => {\n        return (\n          <DrumPad\n            id={drumPad.id}\n            keyCode={drumPad.keyCode}\n            keyTrigger={drumPad.keyTrigger}\n            url={drumPad.url}\n          />\n        );\n      })}\n      <section id=\"display\"></section>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}